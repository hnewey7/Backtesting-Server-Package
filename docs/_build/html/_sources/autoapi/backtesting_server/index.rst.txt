:py:mod:`backtesting_server`
============================

.. py:module:: backtesting_server

.. autoapi-nested-parse::

   Package to interact with MySQL server, recording results of the backtesting.

   Created on Tuesday 9th April 2024.
   @author: Harry New



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   main/index.rst


Package Contents
----------------

.. py:class:: BacktestingServer(standard_details: dict, sql_details: dict)


   Object representing the SQL server, allowing users to interact without having to directly connect.
   - Handles backtesting strategies.
   - Allows results to be uploaded.

   .. py:method:: connect(database: str) -> tuple[paramiko.Channel, pymysql.cursors.Cursor] | tuple[None, None]

      Connecting to MySQL server using SSH.

      :param database: Name of database to connect to.
      :type database: str

      :returns: * *paramiko.Channel* -- Channel to MySQL server.
                * *pymysql.cursors.Cursor* -- Cursor to execute SQL queries.


   .. py:method:: upload_instrument(instrument: ig_package.Instrument, live_tracking: bool = False, dataset: pandas.DataFrame = [], groups: list[InstrumentGroup] = []) -> None

      Uploading instrument to the backtesting server.

      :param instrument: Instrument the historical data corresponds to.
      :type instrument: ig_package.Instrument
      :param live_tracking: OPTIONAL Enable/disable live tracking of instrument.
      :type live_tracking: bool = False
      :param dataset: OPTIONAL DataFrame containing the data to be uploaded.
      :type dataset: pd.DataFrame = []
      :param groups: OPTIONAL List of Instrument Groups to add the instrument to.
      :type groups: list[InstrumentGroup] = []


   .. py:method:: update_historical_data(ig: ig_package.IG, groups: list[InstrumentGroup] = []) -> None

      Updating new historical data on instruments being tracked with the BacktestingServer.

      :param ig: IG object to interact with IG Group's API.
      :type ig: ig_package.IG
      :param groups: OPTIONAL List of Instrument Groups to update.
      :type groups: list[InstrumentGroup] = []


   .. py:method:: _check_historical_data_summary_exists() -> bool

      Checking if the historical data summary table exists on the MySQL server. Handles this by requesting entire table and checking for response.

      :returns: Depending on whether the summary table exists or not.
      :rtype: bool


   .. py:method:: _check_instrument_in_historical_data(instrument: ig_package.Instrument) -> bool

      Checking if instrument is already in historical data.

      :param instrument: Instrument to be checked.
      :type instrument: ig_package.Instrument

      :returns: Boolean depending if instrument is present in historical data.
      :rtype: bool


   .. py:method:: _create_historical_data_summary() -> None

      Creating the historical data summary on the MySQL server.


   .. py:method:: _add_historical_data_summary(instrument: ig_package.Instrument, live_tracking: bool = False, groups: list[InstrumentGroup] = []) -> None

      Adding instrument to the historical data summary and creating new table for historical data.

      :param instrument: Instrument to add to the historical data summary.
      :type instrument: ig_package.Instrument
      :param live_tracking: OPTIONAL Enable/disable live tracking of instrument.
      :type live_tracking: bool
      :param groups: OPTIONAL List of Instrument Groups.
      :type groups: list[InstrumentGroups]


   .. py:method:: _upload_clean_historical_data(instrument: ig_package.Instrument) -> None

      Uploading historical data for an instrument with no previous data.

      :param instrument: Instrument to upload data for.
      :type instrument: ig_package.Instrument


   .. py:method:: _upload_on_existing_historical_data(instrument: ig_package.Instrument, previous_datetime: datetime.datetime) -> None

      Uploading up-to-date historical data on instrument already with existing historical data.

      :param instrument: Instrument for uploading recent historical data on.
      :type instrument: ig_package.Instrument
      :param previous_datetime: Datetime of last historical price.
      :type previous_datetime: datetime


   .. py:method:: add_instrument_group(name: str) -> InstrumentGroup | None

      Creating an instrument group list for grouping various instruments together.

      :param name: Name of the instrument group.
      :type name: str

      :returns: Instrument group created.
      :rtype: InstrumentGroup | None


   .. py:method:: del_instrument_group(name: str) -> InstrumentGroup | None

      Deleting the instrument group.

      :param name: Name of the instrument group.
      :type name: str

      :returns: Instrument group deleted.
      :rtype: InstrumentGroup


   .. py:method:: _get_instrument_groups() -> list[InstrumentGroup] | None

      Getting all instrument groups from the Backtesting Server.

      :returns: List of all InstrumentGroups stored on the server or None.
      :rtype: list[InstrumentGroup] | None


   .. py:method:: _create_instrument_groups_table() -> None

      Creating instrument groups table on the database.


   .. py:method:: _check_instrument_groups_table() -> bool

      Checking if instrument groups tables exists within the database.

      :returns: Boolean if instrument groups table exists or not.
      :rtype: bool


   .. py:method:: _update_groups_in_historical_data() -> None

      Updating the Historical Data Summary for any new Instrument Groups that have been added.


   .. py:method:: upload_live_data(ig: ig_package.IG, instrument_list: list[ig_package.Instrument] = [], instrument_group: InstrumentGroup = None, capture_period: int = None) -> None

      Uploading live data continuously for all instruments provided.

      :param ig: IG object.
      :type ig: ig_package.IG
      :param instrument_list: OPTIONAL List of instruments to cycle through collecting live data and uploading to the server.
      :type instrument_list: list[ig_package.Instrument] = []
      :param instrument_group: OPTIONAL Instrument group defined on the Backtesting Server to cycle through.
      :type instrument_group: InstrumentGroup = None
      :param capture_period: OPTIONAL Capturing data for a certain amount of time.
      :type capture_period: int = 0


   .. py:method:: get_historical_data(instrument: ig_package.Instrument, resolution: str = None, start_datetime: str = None, end_datetime: str = None) -> pandas.DataFrame

      Getting historical data stored on the Backtesting Server.

      :param instrument: Instrument to get historical data for.
      :type instrument: ig_package.Instrument
      :param resolution: OPTIONAL Resolution of historical data candlesticks e.g. SECOND, MINUTE, MINUTE_15, HOUR, HOUR_4 and DAY.
      :type resolution: str
      :param start_datetime: OPTIONAL Start datetime of data e.g. yyyy-mm-dd HH:MM:SS.
      :type start_datetime: str
      :param end_datetime: OPTIONAL End datetime of data e.g. yyyy-mm-dd HH:MM:SS.
      :type end_datetime: str

      :returns: DataFrame containing historical data, e.g columns = ['Datetime', 'Open', 'High', 'Low', 'Close']
      :rtype: pd.DataFrame


   .. py:method:: get_uploaded_instruments(ig: ig_package.IG) -> list[ig_package.Instrument] | None

      Getting all instruments uploaded to the Backtesting Server.

      :param ig: IG object.
      :type ig: ig_package.IG

      :returns: List of Instruments that are uploaded to the Backtesting Server.
      :rtype: list[ig_package.Instrument] | None


   .. py:method:: _filter_candles(dataframe: pandas.DataFrame, resolution: str) -> pandas.DataFrame

      Filter candlesticks for a specific resolution.

      :param dataframe: Historical data in dataframe.
      :type dataframe: pd.DataFrame
      :param resolution: Resolution e.g. SECOND, MINUTE, MINUTE_15, HOUR, HOUR_4 and DAY.
      :type resolution: str

      :returns: Dataframe of candles with Open, High, Low and Close.
      :rtype: pd.DataFrame



.. py:class:: InstrumentGroup(name: str, cursor: pymysql.cursors.Cursor)


   Class for representing a group of instruments on the Backtesting Server. These instruments can have entire actions performed on them, allowing for easy management of specific instruments.

   .. py:method:: _get_instrument_names() -> list[str] | None

      Getting all instrument names associated with the Instrument Group.

      :returns: List of instrument names or None.
      :rtype: list[str] | None


   .. py:method:: _get_instrument_epics() -> list[str] | None

      Getting all instrument epics associated with the Instrument Group.

      :rtype: list[str] | None


   .. py:method:: get_instruments(ig: ig_package.IG) -> list[ig_package.Instrument]

      Getting instruments from IG associated with the Instrument Group.

      :param ig: IG object to interact with IG REST API.
      :type ig: ig_package.IG

      :returns: List of Instrument objects from the Instrument Group.
      :rtype: list[ig_package.Instrument]



